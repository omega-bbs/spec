scalar Date

scalar Buffer

type Query {
  # 获取板块列表
  allBoards: [Board]
  # 通过 id 获取板块
  boardById(id: ID!): Board
  # 通过 url slug 获取板块
  boardBySlug(slug: String!): Board
  # 获取帖子列表
  allTopics: Topic
  # 获取帖子
  topicById(id: ID!): Topic
  # 获取用户
  userById(id: ID!): User
  # 获取自己
  getMe: User
}

type Mutation {
  # 回帖
  newPost(topidId: ID!, post: PostInput!): Post
  # 修改回帖（或者主题的内容）
  updatePost(id: ID!, post: PostInput!): Post
  # 发贴
  newTopic(topic: TopicInput): Topic
  # 修改主题内容、元数据、转移板块（只改内容也可以用 updatePost）
  updateTopic(id: ID!, topic: TopicInput): Topic
  # 楼中楼
  newComment(postId: ID!, comment: CommentInput): Comment
  # 修改楼中楼
  updateComment(id: ID!, comment: CommentInput): Comment
  # 上传图片
  newFile(file: FileInput): File
  # 注册
  newUser(user: NewUserInput): User
  # 更新用户信息
  updateUser(user: UpdateUserInput): User
}

# 通用排序方式；按创建时间或按更新时间；必须成对出现
enum Order {
  createdAsc
  createdDesc
  updatedAsc
  updatedDesc
}

type PageInfo {
  hasNextPage: Boolean!
}

# --- 帖子 --

enum PostBodyType {
  ast
  plain
  markdown
}

type Post {
  id: ID!
  # 楼层号；0=楼主
  sequence: Int!
  bodyType: PostBodyType!
  body: String!
  author: User!
  topic: Topic!
  referencesBy: [Post]!
  referencesTo: [Post]!
  comments(first: Int, after: String, order: Order): Comments
  commentCount: Int!
  files: [File]!
  createdAt: Date!
  updatedAt: Date
  deletedAt: Date
}

type PostEdge {
  node: Post!
  # cursor 即楼层号
  cursor: Int!
}

type Posts {
  edges: [PostEdge]!
  pageInfo: PageInfo!
}

# 回贴 or 修改
input PostInput {
  bodyType: PostBodyType!
  body: String!
  quotePostIds: [ID]!
  referencesTo: [ID]!
}

# --- 主题 ---

type Topic {
  id: ID!
  title: String!
  board: Board!
  rootPost: Post!
  lastPost: Post!
  # after 即 cursor 即楼层号
  posts(first: Int, after: Int, order: Order): Posts!
  postCount: Int!
  createdAt: Date!
  updatedAt: Date
  deletedAt: Date
}

type TopicEdge {
  node: Topic!
  cursor: String!
}

type Topics {
  edges: [TopicEdge]!
  pageInfo: PageInfo!
}

# 发主题 / 修改主题
input TopicInput {
  rootPost: PostInput
  title: String!
  boardId: ID!
}

# --- 楼中楼 ---

type Comment {
  id: ID!
  body: String!
  author: User!
  post: Post!
  createdAt: Date!
  updatedAt: Date
  deletedAt: Date
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

type Comments {
  edges: [CommentEdge]!
  pageInfo: PageInfo!
}

# 发楼中楼 / 修改楼中楼
input CommentInput {
  body: String
}

# --- 文件 ---

enum FileUsage {
  avatar
  post
}

union FileAssociated = User | Post

type File {
  id: ID!
  usage: FileUsage!
  usedIn: FileAssociated
  author: User!
  filename: String!
  mime: String!
  hash: String!
  bytes: Int!
  storageDriver: String!
  path: String!
  url: String!
  createdAt: Date!
  deletedAt: Date
}

# 上传文件
input FileInput {
  usage: FileUsage!
  filename: String!
  mime: String!
  content: Buffer!
  associatedId: ID
}

# --- 板块 ---

type Board {
  id: ID!
  slug: String!
  name: String!
  theme: String
  description: String
  topics(first: Int, after: String, order: Order): Topics!
  topicCount: Int
}

# --- 用户 ---

type User {
  id: ID!
  username: String!
  displayName: String
  email: String # null if private
  bio: String
  avatarUrl: String
  avatarFile: File
  lastLoggedInAt: Date
  role: Role!
  createdAt: Date!
}

# 新用户
input NewUserInput {
  username: String!
  email: String!
  password: String!
}

# 修改用户
input UpdateUserInput {
  id: ID!
  bio: String
  role: ID!
  avatarFileId: ID!
}

# --- 角色 ---

type Role {
  id: ID!
  permissions: [Permission]!
  title: String
}

type Permission {
  id: ID!
  name: String!
}
